600 REM print maze
610 IF maze_drawn THEN GOTO 730
620 LET maze_drawn = 1
630 LET pr = PEEK(1) : LET pc = PEEK(2) : REM player row, column
640 CLS : REM the first time around we need to draw the maze
650 LOCATE 2,1
660 FOR row = 0 TO height-1
670     LET s$ = ""
680     FOR col = 0 TO width-1
690         LET cell = PEEK(16 + row * width + col)
700         s$ = s$ + MID$(" X", cell, 1)
710     NEXT col : PRINT s$
720 NEXT row
730 REM erase the previous player position and print the new one
740 LOCATE 2+pr, 1+pc : PRINT " ";
750 pr = PEEK(1) : pc = PEEK(2)
760 LOCATE 2+pr, 1+pc : PRINT "@";
770 REM print the number of steps so far
780 LOCATE 1,10 : PRINT "STEPS: "; steps;
790 LET steps = steps + 1
800 RETURN

1000 REM calculate player direction
1010 LET player_row = PEEK(1)
1020 LET player_col = PEEK(2)
1030 REM these variables tell whether there's a wall in that direction
1040 LET right = PEEK(16 + player_row * width + player_col + 1)
1050 LET down = PEEK(16 + (player_row+1) * width + player_col)
1060 LET left = PEEK(16 + player_row * width + player_col - 1)
1070 LET up = PEEK(16 + (player_row-1) * width + player_col)
1080 REM TODO: write the next direction at memory address 0
1090 REM directions: 0=right, 1=down, 2=left, 3=up

1100 REM here's an interactive version
1110 GET key
1120 IF key = -2 THEN POKE 0, 1 : RETURN : REM no user present
1130 IF key = -1 THEN PAUSE 100: GOTO 1110 : REM wait for input
1140 IF key = 13 THEN STOP : REM user wants out
1150 IF key = 0 THEN
1160     IF right = 0 THEN GOTO 1250
1170 ELSE IF key = 1 THEN
1180     IF down = 0 THEN GOTO 1250
1190 ELSE IF key = 2 THEN
1200     IF left = 0 THEN GOTO 1250
1210 ELSE IF key = 3 THEN
1220     IF up = 0 THEN GOTO 1250
1230 END IF
1240 PAUSE 100 : GOTO 1110 : REM ignore key, wait for next one
1250 POKE 0, key
1251 GOSUB 1300
1252 RETURN



1300 REM find next rotation
if calc_path then goto 'skip_calc_path'
calc_path = 1
gosub 'init'
gosub 'create_grid'
gosub 'create_deque'
REM if (lend=rend) then deqtest = deqtest+1
REM r1=-1:r2=9:r3=38283928
REM gosub 'insertright3'
REM if (lend=rend) then deqtest = deqtest+2
REM r1=0:r2=0:r3=0
REM gosub 'popleft3'
REM if (lend=rend) then deqtest = deqtest+4
gosub 'find_path'
gosub 'debug_printout'
goto 'skip_calc_path'
'skip_calc_path' REM playerx=peek(2):playery=peek(1)
REM playerdir=grid(playerx,playery)
REM if playerdir=-1 then return
REM poke 0,playerdir
locate peek(6),1
REM print playerdir;
REM print sizex;";";sizey;";";endx;";";endy;";";
REM print r1;";";r2;";";r3;";";deqtest;
REM gosub 'debug_printout'
gosub 'printout_stack'
return


REM NOTE::
REM for is inclusive
REM dim ... isn't
REM anything after REM is a comment

'init' r1=0:r2=0:r3=0:r4=0:r5=0 : REM registers
sizex=peek(15):sizey=peek(14) : REM size of grid
REM startx=peek(2):starty=peek(1) : REM start position, thought not used as find_path finds all paths
endx=peek(13):endy=peek(12) : REM end position
dim debugstack(500) : REM debug printout
dspointer=0 : REM debug printout pointer
return

'add_printout' REM add r1 to debugstack
debugstack(dspointer)=r1 : dspointer=dspointer+1
return

'printout_stack' REM and empty
locate peek(6)-1,1
for i=0 to dspointer-1
    print debugstack(i);";";
next i
return


'create_grid' dim grid(1)
dim grid(sizex,sizey)
for x=0 to sizex-1: for y=0 to sizey-1:grid(x,y)=peek(16+x+y*sizex):next:next
return

'debug_printout' locate 2,1 :REM begin of grid
REM locate peek(6),1
for y=0 to sizey-1 : prntout$="" : for x=0 to sizex-1
x$="?"
if grid(x,y)=0 then x$="0"
if grid(x,y)=1 then x$="1"
if grid(x,y)=2 then x$="2"
if grid(x,y)=3 then x$="3"
prntout$=prntout$+x$ : next x
locate 2+y,1 : print prntout$; : next y
REM locate peek(6),1
REM print "help";k;
return

'create_deque' dim deque(1)
dim deque(1000)
dsize=1000
lend=0:rend=0
return

'insertleft' REM insert r1 left into deque
deque(lend)=r1
if lend then lend=lend-1 : else lend=dsize-1
return
'insertleft2' deque(lend)=r1
if lend then lend=lend-1 : else lend=dsize-1
deque(lend)=r2
if lend then lend=lend-1 : else lend=dsize-1
return
'insertleft3' deque(lend)=r1 : REM painful, but the other option is even more painful
if lend then lend=lend-1 : else lend=dsize-1
deque(lend)=r2
if lend then lend=lend-1 : else lend=dsize-1
deque(lend)=r3
if lend then lend=lend-1 : else lend=dsize-1
return

'insertright' REM insert r1 right into the deque
deque(rend)=r1
if rend=dsize-1 then rend=0: else rend=rend+1
return
'insertright2' deque(rend)=r1
if rend=dsize-1 then rend=0: else rend=rend+1
deque(rend)=r2
if rend=dsize-1 then rend=0: else rend=rend+1
return
'insertright3' deque(rend)=r1
r1=7:gosub 'add_printout'
if rend=dsize-1 then rend=0: else rend=rend+1
deque(rend)=r2
if rend=dsize-1 then rend=0: else rend=rend+1
deque(rend)=r3
if rend=dsize-1 then rend=0: else rend=rend+1
return


'popleft' REM return r1 from left of deque
r1=deque(lend)
if lend=dsize-1 then lend=0: else lend=lend+1
return
'popleft2' r1=deque(lend)
if lend=dsize-1 then lend=0: else lend=lend+1
r2=deque(lend)
if lend=dsize-1 then lend=0: else lend=lend+1
return
'popleft3' r1=deque(lend)
if lend=dsize-1 then lend=0: else lend=lend+1
r2=deque(lend)
if lend=dsize-1 then lend=0: else lend=lend+1
r3=deque(lend)
if lend=dsize-1 then lend=0: else lend=lend+1
return

'popright' REM return r1 from right of deque
r1=deque(rend)
if rend=0 then rend=dsize-1: else rend=rend-1
return
'popright2' r1=deque(rend)
if rend=0 then rend=dsize-1: else rend=rend-1
r2=deque(rend)
if rend=0 then rend=dsize-1: else rend=rend-1
return
'popright3' r1=deque(rend)
if rend=0 then rend=dsize-1: else rend=rend-1
r2=deque(rend)
if rend=0 then rend=dsize-1: else rend=rend-1
r3=deque(rend)
if rend=0 then rend=dsize-1: else rend=rend-1
return

REM deque length = lend-rend, isempty = lend=rend

'decode' REM take integer in r1 (32 signed) and decode into r1(0:14),r2(15:29) (15 unsigned)
REM there are no bitwise operations, so we have to do it manually
r2=r1/32768
r1=r1-(r1/32768*32768)
return
'encode' REM take r1(0:14),r2(15:29) and encode into integer r1
r1=r1+r2*32768
return

REM convert int 0-3 to 1,0,-1,0 : abs(2-x)-1
REM convert int 0-3 to 0,1,0,-1 : 1-abs(x-1)


'add_neighbours' REM add neighbours (if not visited) of cell (r4,r5) to deque
REM r1=r4:gosub 'add_printout':r1=r5:gosub 'add_printout' : REM 48,31
REM r1=sizex-1:gosub 'add_printout':r1=sizey-1:gosub 'add_printout' : REM 48,32
REM r1=grid(r4-1,r5):gosub 'add_printout' : REM 0
REM r1=grid(r4,r5+1):gosub 'add_printout' : REM 1
REM r1=grid(r4,r5-1):gosub 'add_printout' : REM 1
REM if r4>0 then r1=100:gosub 'add_printout' : REM
if r4<sizex-1 and grid(r4+1,r5)=0 then r1=r4+1 : r2=r5   : r3=2 : gosub 'insertright3'
r1 = 66 : gosub 'add_printout' : REM THIS IS NOT EXECUTED??? 
r1 = 66 : gosub 'add_printout' : REM THIS IS NOT EXECUTED??? 
REM if grid(r4-1,r5)=0 then r1=101:gosub 'add_printout' : REM
REM if r4>0       and grid(r4-1,r5)=0 then r1=r4-1 : r2=r5   : r3=0 : gosub 'add_printout'
if r4>0       and grid(r4-1,r5)=0 then r1=r4-1 : r2=r5   : r3=0 : gosub 'insertright3'
if r5<sizey-1 and grid(r4,r5+1)=0 then r1=r4   : r2=r5+1 : r3=3 : gosub 'insertright3'
if r5>0       and grid(r4,r5-1)=0 then r1=r4   : r2=r5-1 : r3=1 : gosub 'insertright3'
return


'find_path' REM put 1:4 (0:3-1) into grid, which lead to end position (uses BFS)
REM visited(x,y) = if grid(x,y) is not zero
REM end cell is -1
r4=endx:r5=endy:gosub 'add_neighbours'
grid(endx,endy)=-1
if lend=rend then r1=0 : else r1=1
gosub 'add_printout'
'whiledeque' if (lend=rend) then return
r1=9:gosub 'add_printout'
gosub 'popleft3'
if peek(r1+r2*sizex) then goto 'whiledeque'
grid(r1,r2)=r3
r4=r1:r5=r2:gosub 'add_neighbours'
goto 'whiledeque'
