3000 REM find next rotation

goto 'skip_debug'

def 'debug' 'init'()
'create_grid'()
'find_keys_doors'()
'handle_input'()
goto 'skip_all'
def 'skip_debug' REM

if calc_path then goto 'skip_calc_path' : REM a way to call a subroutine
calc_path = 1
'init'()
'create_grid'()
'create_deque'()
'find_path'()
REM 'debug_printout'()
def 'skip_calc_path' REM change peek(0) to direction in the cell (-1)
playerx=peek(2):playery=peek(1)
playerdir=grid(playerx,playery)-1
if playerdir=-1 then return : REM reached target
poke 0,playerdir
REM locate peek(6),1
REM print playerdir;
REM print sizex;";";sizey;";";endx;";";endy;";";
REM print r1;";";r2;";";r3;";";deqtest;
REM 'debug_printout'()
REM 'printout_stack'()
def 'skip_all' REM
return

def 'handle_input' get key

REM if key < 0 then pause 100:goto 'handle_input'
if key <> 3 then pause 100:goto 'handle_input'
locate 1,1:print sizex;";";sizey;
locate 2,1:'print_keys_doors'()
pause 100:goto 'handle_input'
return


def 'init' r1=0:r2=0:r3=0:r4=0:r5=0:r6=0:r7=0:r8=0:r9=0 : REM registers
REM note: r0\d+ are not initialized as they are private variables and should be initialized inside the functions anyway
sizex=peek(15):sizey=peek(14) : REM size of grid
startx=peek(2):starty=peek(1) : REM start position
endx=peek(13):endy=peek(12) : REM end position
dim debugstack(500) : REM debug printout
dspointer=0 : REM debug printout pointer
return

def 'add_printout' REM add r1 to debugstack
debugstack(dspointer)=r1 : dspointer=dspointer+1
return

def 'printout_stack' REM and empty
locate peek(6)-3,1
for i=0 to dspointer-1
    print debugstack(i);";";
next i
return


REM 0=nothing, 1=wall, 2=treasure, 10-19=keys, 20-29=doors
def 'create_grid' dim grid(1)
dim grid(sizex,sizey)
for x=0 to sizex-1: for y=0 to sizey-1
real=peek(16+x+y*sizex)
if real=0 or real=2 or (real>=10 and real<20) then grid(x,y)=0 : else grid(x,y)=1 
next:next
return

import vector

def 'find_keys_doors' 'init_vector'(10) : REM initial size doesn't matter, because it is dynamically resized
for x=0 to sizex-1: for y=0 to sizey-1
    if grid(x,y)>=10 then 'vpush_back2'(x,y)
next:next
return

def 'print_keys_doors' for x=0 to ((vsize/2)-1)
    print vec(x*2);":";vec(x*2+1);":";grid(vec(x*2),vec(x*2+1));";";
next x
return

def 'debug_printout' locate 2,1 :REM begin of grid
for y=0 to sizey-1 : prntout$="" : for x=0 to sizex-1
if (x>=0) and (x<10) then x$=chr$(48+x):else x$="?"
prntout$=prntout$+x$ : next x
locate 2+y,1 : print prntout$; : next y
return

import deque


def 'decode' REM take integer in r1 (32 signed) and decode into r1(0:14),r2(15:29) (15 unsigned)
REM there are no bitwise operations, so we have to do it manually
r2=r1/32768
r1=r1-(r1/32768*32768)
return
def 'encode' REM take r1(0:14),r2(15:29) and encode into integer r1
r1=r1+r2*32768
return

REM convert int 0-3 to 1,0,-1,0 : abs(2-x)-1
REM convert int 0-3 to 0,1,0,-1 : 1-abs(x-1)


def 'numlen' if r1<0 then r0=2 : else r0=1
r1=r1/10:if r1<>0 then r0=r0+1 :goto 1001: else r1 = r0 :return
REM calculates the number of digits in r1, returns r1

def 'newline' newline$="":for x=r1 to peek(5):newline$=newline$+" ":next:return
REM returns spaces to add to a string to act as a newline in singular printout, r1=current column (1-based) the cursor is at

def 'mod' r1=r1-((r1/r2)*r2):return

def 'add_neighbours' REM add neighbours (if not visited) of cell (r1,r2) to deque
REM have to make dir+1 as otherwise 0 would be counted as nothing
r3=r1:r4=r2
if r3<(sizex-1) then
if grid(r3+1,r4)=0 then 'deqinsertright2'(r3+1,r4):grid(r3+1,r4)=3
end if
if r3>0 then
if grid(r3-1,r4)=0 then 'deqinsertright2'(r3-1,r4):grid(r3-1,r4)=1
end if
if r4<(sizey-1) then
if grid(r3,r4+1)=0 then 'deqinsertright2'(r3,r4+1):grid(r3,r4+1)=4
end if
if r4>0 then
if grid(r3,r4-1)=0 then 'deqinsertright2'(r3,r4-1):grid(r3,r4-1)=2
end if
REM why are both parts of an and evaluated, even if one is false?
return


def 'find_path' REM put 1:4 (0:3-1) into grid, which lead to end position (uses BFS)
REM visited(x,y) = if grid(x,y) is not zero
REM end cell is -1
'add_neighbours'(endx,endy)
grid(endx,endy)=-1
def 'whiledeque' if (lend=rend) then return
'deqpopleft2'()
if r1=startx and r2=starty then return
'add_neighbours'()
goto 'whiledeque'
