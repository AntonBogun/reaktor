def 'create_deque' dim deque(1)
dim deque(5000)
dsize=5000:lend=0:rend=0
return

REM deque lend,rend point to [start,end) of deque
REM isEmpty= (lend=rend)
REM length is not implemented

REM remake that takes less space
def 'deqinsertleft' r0=1:goto 'deqinsertlmain'
def 'deqinsertleft2' r0=2:goto 'deqinsertlmain'
def 'deqinsertleft3' r0=3:goto 'deqinsertlmain'
def 'deqinsertlmain' if lend then lend=lend-1 : else lend=dsize-1
deque(lend)=r1
if r0<2 then return
if lend then lend=lend-1 : else lend=dsize-1
deque(lend)=r2
if r0<3 then return
if lend then lend=lend-1 : else lend=dsize-1
deque(lend)=r3
return


def 'deqpopright' r0=1:goto 'deqpoprmain'
def 'deqpopright2' r0=2:goto 'deqpoprmain'
def 'deqpopright3' r0=3:goto 'deqpoprmain'
def 'deqpoprmain' if rend then rend=rend-1 : else rend=dsize-1
r1=deque(rend)
if r0<2 then return
if rend then rend=rend-1 : else rend=dsize-1
r2=deque(rend)
if r0<3 then return
if rend then rend=rend-1 : else rend=dsize-1
r3=deque(rend)
return

def 'deqinsertright' r0=1:goto 'deqinsertrmain'
def 'deqinsertright2' r0=2:goto 'deqinsertrmain'
def 'deqinsertright3' r0=3:goto 'deqinsertrmain'
def 'deqinsertrmain' deque(rend)=r1
if rend=dsize-1 then rend=0: else rend=rend+1
if r0>=2 then deque(rend)=r2 : else return
if rend=dsize-1 then rend=0: else rend=rend+1
if r0>=3 then deque(rend)=r3 : else return
if rend=dsize-1 then rend=0: else rend=rend+1
return

def 'deqpopleft' r0=1:goto 'deqpoplmain'
def 'deqpopleft2' r0=2:goto 'deqpoplmain'
def 'deqpopleft3' r0=3:goto 'deqpoplmain'
def 'deqpoplmain' r1=deque(lend)
if lend=dsize-1 then lend=0: else lend=lend+1
if r0>=2 then r2=deque(lend) : else return
if lend=dsize-1 then lend=0: else lend=lend+1
if r0>=3 then r3=deque(lend) : else return
if lend=dsize-1 then lend=0: else lend=lend+1
return

REM deque length = lend-rend, isempty = lend=rend