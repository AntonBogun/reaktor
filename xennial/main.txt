3000 REM find next rotation


'init_debug_stack'()
goto 'skip_debug'

def 'debug' 'init'()
'create_grid'()
'find_keys_doors'()
'handle_input'()
goto 'skip_all'
def 'skip_debug' REM

if calc_path then goto 'skip_calc_path' : REM a way to call a subroutine
calc_path = 1
'init'()
'create_grid'()
'find_path'()
REM 'debug_printout'()
def 'skip_calc_path' REM change peek(0) to direction in vector
if playerpos<0 then 'find_path'()
REM 'printout_stack'()
playerdir=vec(playerpos)
playerpos=playerpos-1
poke 0,playerdir
REM locate peek(6),1
REM print playerdir;
REM print sizex;";";sizey;";";endx;";";endy;";";
REM print r1;";";r2;";";r3;";";deqtest;
REM 'debug_printout'()
REM 'printout_stack'()
def 'skip_all' REM
return

def 'handle_input' get key

REM if key < 0 then pause 100:goto 'handle_input'
if key <> 3 then pause 100:goto 'handle_input'
locate 1,1:print sizex;";";sizey;
locate 2,1:'print_keys_doors'()
pause 100:goto 'handle_input'
return


def 'init' r1=0:r2=0:r3=0:r4=0:r5=0:r6=0:r7=0:r8=0:r9=0 : REM registers
REM note: r0\d+ are not initialized as they are private variables and should be initialized inside the functions anyway
sizex=peek(15):sizey=peek(14) : REM size of grid
endx=peek(13):endy=peek(12) : REM end position
dim dir_to_xy(4,2)
dir_to_xy(0,0)=1:dir_to_xy(0,1)=0
dir_to_xy(1,0)=0:dir_to_xy(1,1)=1
dir_to_xy(2,0)=-1:dir_to_xy(2,1)=0
dir_to_xy(3,0)=0:dir_to_xy(3,1)=-1
return

def 'init_debug_stack' dim debugstack(500) : REM debug printout
dspointer=0 : REM debug printout pointer
return

def 'add_printout' REM add r1 to debugstack
debugstack(dspointer)=r1 : dspointer=dspointer+1
return

def 'printout_stack' REM and empty
locate 1,1
for i=0 to dspointer-1
    print debugstack(i);";";
next i
return


REM 0=nothing, 1=wall, 2=treasure, 10-19=keys, 20-29=doors
REM 0=can pass, 1-4=dir, -1=unpassable/door, -2=treasure, -3=key, -4=end
def 'create_grid' dim grid(1)
dim grid(sizex,sizey)
dim doors(10,2)
treasures=0
for x=0 to sizex-1: for y=0 to sizey-1
    real=peek(16+x+y*sizex)
    if real=0 then 
    grid(x,y)=0
    else if real=1 then
    grid(x,y)=-1
    else if real>=20 then
    doors(real-20,0)=x : doors(real-20,1)=y : grid(x,y)=-1
    else if real=2 then
    grid(x,y)=-2 : treasures=treasures+1
    else if (real>=10 and real<20) then
    grid(x,y)=-3
    end if
    next y
next x
collectedtreasures=0
grid(endx,endy)=-4
return

import vector

def 'find_keys_doors' 'init_vector'(10) : REM initial size doesn't matter, because it is dynamically resized
for x=0 to sizex-1: for y=0 to sizey-1
    if grid(x,y)>=10 then 'vpush_back2'(x,y)
    next y
next x
return

def 'print_keys_doors' for x=0 to ((vsize/2)-1)
    print vec(x*2);":";vec(x*2+1);":";grid(vec(x*2),vec(x*2+1));";";
next x
return


def 'debug_printout' locate 2,1 :REM begin of grid
for y=0 to sizey-1 : prntout$="" : for x=0 to sizex-1
if (x>=0) and (x<10) then x$=chr$(48+x):else x$="?"
prntout$=prntout$+x$ : next x
locate 2+y,1 : print prntout$; : next y
return

import deque


def 'decode' REM take integer in r1 (32 signed) and decode into r1(0:14),r2(15:29) (15 unsigned)
REM there are no bitwise operations, so we have to do it manually
r2=r1/32768
r1=r1-(r1/32768*32768)
return
def 'encode' REM take r1(0:14),r2(15:29) and encode into integer r1
r1=r1+r2*32768
return

REM convert int 0-3 to 1,0,-1,0 : abs(2-x)-1
REM convert int 0-3 to 0,1,0,-1 : 1-abs(x-1)


def 'numlen' if r1<0 then r0=2 : else r0=1
r1=r1/10:if r1<>0 then r0=r0+1 :goto 1001: else r1 = r0 :return
REM calculates the number of digits in r1, returns r1

def 'newline' newline$="":for x=r1 to peek(5):newline$=newline$+" ":next x:return
REM returns spaces to add to a string to act as a newline in singular printout, r1=current column (1-based) the cursor is at

def 'mod' r1=r1-((r1/r2)*r2):return

def 'add_neighbours' REM add neighbours (if not visited) of cell (r1,r2) to deque
REM have to make dir+1 as otherwise 0 would be counted as nothing
r4=r1:r5=r2
REM 'add_printout'(-r4):'add_printout'(-r5)
dir=-1
def 'dir_while' dir=dir+1:if dir>3 then return
    REM if found then 'add_printout'(200)
    if found then return
    newx=r4+dir_to_xy(dir,0) : newy=r5+dir_to_xy(dir,1)
    REM if newx<0 or newy<0 then 'printout_stack'()
    gridd=grid(newx,newy) : REM compiler error on "else if grid(newx,newy)"
    REM 'add_printout'(newx):'add_printout'(newy):'add_printout'(gridd)
    if gridd=0 then
    'deqinsertright2'(newx,newy)
    grid(newx,newy)=((dir+2)-((dir+2)/4*4))+1
    REM 'add_printout'(100+grid(newx,newy))
    else if gridd<-1 then
        if gridd=-2 then
        collectedtreasures=collectedtreasures+1
        else if gridd=-3 then
        if collectedtreasures=treasures then goto 'dir_while'
        curkey=peek(16+newx+newy*sizex)
        grid(doors(curkey-10,0),doors(curkey-10,1))=0
        else if gridd=-4 then
        if collectedtreasures<>treasures then goto 'dir_while'
        end if
        found=1
        REM 'printout_stack'()
        'make_path'(newx,newy,dir)
        playerpos=vsize-1
        grid(newx,newy)=0
        'clean_grid'()
    end if
    goto 'dir_while'


def 'make_path' REM add path to vector
currx=r1:curry=r2:currdir=(r3+2)-((r3+2)/4*4) : REM passed-in direction is reversed
REM 'add_printout'(currdir)
currx=currx+dir_to_xy(currdir,0) : curry=curry+dir_to_xy(currdir,1)
'init_vector'(10)
'vpush_back'((currdir+2)-((currdir+2)/4*4)) : REM reverse direction again for path
def 'pathwhile' if currx=startx and curry=starty then return
currdir=grid(currx,curry)-1
REM 'add_printout'(currdir)
'vpush_back'(currdir+2-(currdir+2)/4*4)
REM if currdir<0 then 'printout_stack'()
currx=currx+dir_to_xy(currdir,0) : curry=curry+dir_to_xy(currdir,1)
goto 'pathwhile'

def 'clean_grid' REM remove all visited cells from grid
for x=0 to sizex-1: for y=0 to sizey-1
    if grid(x,y)>=0 then grid(x,y)=0
    next y
next x
return

def 'find_path' REM put 1:4 (0:3-1) into grid, which lead to end position (uses BFS)
REM visited(x,y) = if grid(x,y) is not zero
startx=peek(2):starty=peek(1) : REM start position
REM grid(startx,starty)=1 : REM mark start position as visited
found=0
'create_deque'()
'add_neighbours'(startx,starty)
def 'whiledeque' if found or (lend=rend) then return
'deqpopleft2'()
'add_neighbours'()
REM if lend=rend then 'add_printout'(999)
goto 'whiledeque'
